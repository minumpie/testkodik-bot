import logging
import os
from io import BytesIO
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from barcode import Code128
from barcode.writer import ImageWriter
from config import BOT_TOKEN


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
if not os.path.exists("logs"):
    os.makedirs("logs")

logging.basicConfig(
    filename="logs/bot.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ ===
def generate_barcode_png(product_code: str, scale: int = 4) -> BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ Code128 –≤ PNG.
    :param product_code: —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞
    :param scale: –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 ‚Üí –≤—ã—Å–æ–∫–∞—è —á—ë—Ç–∫–æ—Å—Ç—å)
    :return: BytesIO —Å PNG-—Ñ–∞–π–ª–æ–º
    """
    barcode = Code128(product_code, writer=ImageWriter())
    barcode.writer.set_options({
        "write_text": True,     # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
        "text_distance": 5.0,   # –æ—Ç—Å—Ç—É–ø –Ω–æ–º–µ—Ä–∞ –æ—Ç –∫–æ–¥–∞
        "module_width": 0.4,    # —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
        "module_height": 80,    # –≤—ã—Å–æ—Ç–∞ —à—Ç—Ä–∏—Ö–æ–≤
        "quiet_zone": 6.0,      # –ø–æ–ª—è
        "font_size": 40,        # —Ä–∞–∑–º–µ—Ä —Ü–∏—Ñ—Ä
    })

    buffer = BytesIO()
    barcode.write(buffer, options={"dpi": 300 * scale})
    buffer.seek(0)
    return buffer


# === –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã), –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –Ω–µ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥ –≤ PNG üì¶"
    )


async def handle_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_code = (update.message.text or "").strip()

    if not product_code.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    try:
        barcode_png = generate_barcode_png(product_code)
        await update.message.reply_document(
            barcode_png,
            filename=f"{product_code}.png",
            caption=f"‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ‚Ññ {product_code}",
        )
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥ –¥–ª—è {product_code}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –¥–ª—è {product_code}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ üòâ")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º üôà")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    app.add_error_handler(error_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
